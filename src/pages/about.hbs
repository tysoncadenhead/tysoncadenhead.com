{{> _header title="About"}}
    <h1>About</h1>
    <article>
        <p>I am a full-stack programmer. My main focus is on the JavaScript language, but I have dipped my toe into many other languages over the years as well.</p>
        
        <h2>The Story</h2>
        <p>My journey toward the mastery of JavaScript began shortly after leaving my first programming job at BigFish where we were using the .NET MVC framework. I had a soft spot for JavaScript ever since I started copying and pasting "Dynamic HTML" snippets around the age of 13. However, I previously had approached JavaScript as an enhancement to a project, not the primary language. That all changed when I began building a web app for <a href="https://www.ifiduciary.com/">Fiduciary Consulting Group</a>, a company in the financial services industry, in 2008. It was clear that my existing jQuery chops wouldn't be enough to provide the rich functionality that we needed, so I began developing an obsession over bringing the same structure and separation of concerns I had seen in the .NET world to JavaScript.</p>
        <p>This approach took many forms, but it was primarily kickstarted by watching a video on YouTube of a conference talk by Nicholas Zakas on <a href="https://www.youtube.com/watch?v=c-kav7Tf834">Maintainable JavaScript</a>. This was a side of JavaScript I had never encountered, where code quality and modularity made the code elegant and scalable.</p>
        <p>I got into <a href="https://www.sencha.com/products/extjs/">EXTJS</a> and eventually Sencha Touch. I wrote applications using the <a href="http://www.javascriptmvc.com/">JavaScriptMVC</a> framework. I even wrote my own minimal MVC implementation to try to tame a large existing codebase at a company called <a href="https://www.drivedominion.com/">Dealerskins</a> (who was aquired by Dominion Dealer Solutions) in the auto industry.</p>
        <p>At a company called <a href="https://www.spendsetter.com/">Moontoast</a> (who was aquired by Spendsetter), which was a startup built around creating quick and easy checkout and payment experiences, I started using <a href="http://backbonejs.org/">Backbone</a> to drive my JavaScript interactions. I really liked the structure of the models, which made keeping local and shared state much easier than anything I had previously experienced.</p>
        <p>My next job was at a company called <a href="https://appendto.com/">appendTo</a>, which was founded by several jQuery core-contributers. While I was there, I did the majority of my work for a single client. We were working on a full featured rich-text editor, using the two-way binding abilities that a framework called <a href="http://knockoutjs.com/">KnockoutJS</a> provided. It was here that I began to develop a love-hate relationship with two-way binding. During that time, I worked with <a href="http://jonathancreamer.com/">Jonathan Creamer</a> to develop a ViewModel layer for Knockout called "<a href="https://github.com/jcreamer898/ko.ninja">ko.Ninja</a>" that made it easier to structure Knockout projects.</p>
        <p>After giving a conference talk about using Socket.io, I was approached by Packt publishing about writing a book on the subject. This became <a href="https://www.amazon.com/Socket-IO-Cookbook-Tyson-Cadenhead/dp/1785880861">The Socket.io Cookbook</a>. It was a great experience to really dive deep into a single subject. By the end, I felt like I had acheived a level of expertise over a single subject in such a way as I hadn't before.</p>
        <p>As appendTo began to close its doors, I moved on to a company in the events and music festivals space called <a href="https://aloompa.com/">Aloompa</a> as the Senior JavaScript developer. At the time, <a href="https://angularjs.org/">Angular</a> was really big, so my first couple of projects were to build administration areas using the Angular framework. As I was just wrapping up the second big project, we were seeing some really big performance issues related to two-way binding. To top it off, the Angular team made an announcement that Angular 2 was going to be a completely new API, which had me worried about the long-term support of my applications if I chose to continue down the Angular route.</p>
        <p>I had heard some really good things about Facebook's <a href="https://reactjs.org/">React</a> library. I thought it was as good a time as any to give it a try. I instantly fell in love with the simplicity of the React API, the component-first architecture, the lack of abstractions around the JavaScript language and the uni-directional data flow. I was really happy with React as a component library, but as the Facebook team is quick to point out, React is a view library, not a framework.</p>
        <p>This was prior to GraphQL being released. There was a new Flux library released every other day and there was no clear winner. With the help of my intern-turned-employee, <a href="https://www.linkedin.com/in/peteigel/">Pete Eigel</a>, I built an ORM for the front-end called "<a href="https://github.com/Aloompa/cannery">Cannery</a>" around the premise that we continually had REST endpoints changed out from under us and we wanted a consistent way to describe data without discrupting the way we implemented it in our React components. The approach worked fairly well, but there were edge cases and the verbosity of describing data and models never quite got to the place I wanted it to be at. I eventually ended up replacing our Cannery endpoints with a combination of Redux and GraphQL when it became clear that they could solve the majority of our pain points without needing to maintain our own library.</p>
        <p>As with many front-end programmers, React opened my eyes to a world of functional programming that made the prototypical and object oriented programming I had been doing seem archaic. I became obsessed with functional purity, composition and immutible data in a way that pushed my skills forward more rapidly than anything else I had done. After about a year of pushing the envelope on functional programming on the front-end, I felt like I had arrived at some really good best practices to avoid classes and mutations altogether using a combination of the Recompose and Ramda libraries for support. So, I developed a conference talk that I gave at Nodevember called <a href="https://www.youtube.com/watch?v=zLQgj2ZmNfU">"Functional Programming in React"</a> where I live-coded a transformation of a traditional stateful React component to a collection of pure functions.</p>
        <p>In December of 2017, I stepped into the role of Innovation Lead at Aloompa. In this role, I am still writing code (arguably more than ever), but I am leading a team of programmers pushing out new products and features to move our company forward. We are still working with React and React Native, but are also building out server-side services with GraphQL, Serverless, AWS Lambda, EC2, Firebase and anything and everything else that can help us to move us toward our goals. For me, this role is an ideal balance. It gives me opportunities to contribute to the product at every stage, continue to devlop my own skills in programming and mentor other programmers as well. I feel strongly that whatever my future may hold, I always want to be in a position where I can maintain a similar balance of growing, teaching and contributing.</p>
    </article>
{{> _footer}}